var _user$project$Main$filtered = function (model) {
	return _elm_lang$core$Set$toList(
		A2(
			_elm_lang$core$Set$diff,
			_elm_lang$core$Set$fromList(model.all),
			_elm_lang$core$Set$fromList(model.out)));
};
var _user$project$Main$config = {
	first: 20,
	rest: {
		ctor: '::',
		_0: 30,
		_1: {
			ctor: '::',
			_0: 40,
			_1: {
				ctor: '::',
				_0: 50,
				_1: {
					ctor: '::',
					_0: 60,
					_1: {ctor: '[]'}
				}
			}
		}
	}
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		if (_p0.ctor === 'ToggleGroupInt') {
			var _p1 = _p0._0;
			return (!A2(_elm_lang$core$List$member, _p1, model.groupOut)) ? _elm_lang$core$Native_Utils.update(
				model,
				{
					groupOut: {ctor: '::', _0: _p1, _1: model.groupOut}
				}) : _elm_lang$core$Native_Utils.update(
				model,
				{
					groupOut: A2(
						_elm_lang$core$List$filter,
						function (e) {
							return !_elm_lang$core$Native_Utils.eq(e, _p1);
						},
						model.groupOut)
				});
		} else {
			var _p2 = _elm_lang$core$String$toInt(_p0._0);
			if (_p2.ctor === 'Ok') {
				var _p3 = _p2._0;
				return (!A2(_elm_lang$core$List$member, _p3, model.out)) ? _elm_lang$core$Native_Utils.update(
					model,
					{
						out: {ctor: '::', _0: _p3, _1: model.out}
					}) : _elm_lang$core$Native_Utils.update(
					model,
					{
						out: A2(
							_elm_lang$core$List$filter,
							function (e) {
								return !_elm_lang$core$Native_Utils.eq(e, _p3);
							},
							model.out)
					});
			} else {
				return model;
			}
		}
	});
var _user$project$Main$groupInt = {
	ctor: '::',
	_0: {
		id: 0,
		desc: '19 or less',
		fn: function (x) {
			return _elm_lang$core$Native_Utils.cmp(x, 20) < 0;
		}
	},
	_1: {
		ctor: '::',
		_0: {
			id: 1,
			desc: '20-24',
			fn: function (x) {
				return (_elm_lang$core$Native_Utils.cmp(x, 20) > -1) && (_elm_lang$core$Native_Utils.cmp(x, 24) < 1);
			}
		},
		_1: {
			ctor: '::',
			_0: {
				id: 2,
				desc: '25-29',
				fn: function (x) {
					return (_elm_lang$core$Native_Utils.cmp(x, 25) > -1) && (_elm_lang$core$Native_Utils.cmp(x, 29) < 1);
				}
			},
			_1: {
				ctor: '::',
				_0: {
					id: 3,
					desc: '30 or more',
					fn: function (x) {
						return _elm_lang$core$Native_Utils.cmp(x, 30) > -1;
					}
				},
				_1: {ctor: '[]'}
			}
		}
	}
};
var _user$project$Main$isChecked = F2(
	function (list, str) {
		var _p4 = _elm_lang$core$String$toInt(str);
		if (_p4.ctor === 'Ok') {
			return A2(_elm_lang$core$List$member, _p4._0, list);
		} else {
			return false;
		}
	});
var _user$project$Main$addN = F2(
	function (n, dict) {
		return A2(_elm_lang$core$Dict$member, n, dict) ? A3(
			_elm_lang$core$Dict$update,
			n,
			_elm_lang$core$Maybe$map(
				F2(
					function (x, y) {
						return x + y;
					})(1)),
			dict) : A3(_elm_lang$core$Dict$insert, n, 1, dict);
	});
var _user$project$Main$freqN = function (list) {
	return A3(_elm_lang$core$List$foldl, _user$project$Main$addN, _elm_lang$core$Dict$empty, list);
};
var _user$project$Main$freq = function (list) {
	return A3(_elm_lang$core$List$foldl, _user$project$Main$addN, _elm_lang$core$Dict$empty, list);
};
var _user$project$Main$addWord = F2(
	function (word, dict) {
		return A2(_elm_lang$core$Dict$member, word, dict) ? A3(
			_elm_lang$core$Dict$update,
			word,
			_elm_lang$core$Maybe$map(
				F2(
					function (x, y) {
						return x + y;
					})(1)),
			dict) : A3(_elm_lang$core$Dict$insert, word, 1, dict);
	});
var _user$project$Main$sentence = 'with this is a sentence with with with a few words in it';
var _user$project$Main$frequency = A3(
	_elm_lang$core$List$foldl,
	_user$project$Main$addWord,
	_elm_lang$core$Dict$empty,
	A2(_elm_lang$core$String$split, ' ', _user$project$Main$sentence));
var _user$project$Main$z = {a: 888, b: 4};
var _user$project$Main$x = A2(
	_elm_lang$core$List$append,
	{
		ctor: '::',
		_0: 111,
		_1: {
			ctor: '::',
			_0: 111,
			_1: {ctor: '[]'}
		}
	},
	{
		ctor: '::',
		_0: 111,
		_1: {
			ctor: '::',
			_0: 111,
			_1: {
				ctor: '::',
				_0: 111,
				_1: {
					ctor: '::',
					_0: 10,
					_1: {
						ctor: '::',
						_0: 2,
						_1: {
							ctor: '::',
							_0: 3,
							_1: {
								ctor: '::',
								_0: 2,
								_1: {
									ctor: '::',
									_0: 4,
									_1: {
										ctor: '::',
										_0: 3,
										_1: {
											ctor: '::',
											_0: 5,
											_1: {
												ctor: '::',
												_0: 3,
												_1: {
													ctor: '::',
													_0: 2,
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$Main$y = A3(
	_elm_lang$core$List$foldl,
	F2(
		function (x, y) {
			return {ctor: '::', _0: x, _1: y};
		}),
	{ctor: '[]'},
	_user$project$Main$x);
var _user$project$Main$frequencyN = A3(_elm_lang$core$List$foldl, _user$project$Main$addN, _elm_lang$core$Dict$empty, _user$project$Main$x);
var _user$project$Main$Model = F4(
	function (a, b, c, d) {
		return {all: a, out: b, rangeOut: c, groupOut: d};
	});
var _user$project$Main$initModel = A4(
	_user$project$Main$Model,
	_user$project$Main$x,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 20, _1: true},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 30, _1: false},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 40, _1: false},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 50, _1: false},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 60, _1: false},
						_1: {ctor: '[]'}
					}
				}
			}
		}
	},
	{ctor: '[]'});
var _user$project$Main$ToggleGroupInt = function (a) {
	return {ctor: 'ToggleGroupInt', _0: a};
};
var _user$project$Main$viewGroupInt = function (model) {
	return A2(
		_elm_lang$html$Html$fieldset,
		{ctor: '[]'},
		A2(
			_elm_lang$core$List$map,
			function (el) {
				return A2(
					_elm_lang$html$Html$label,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$input,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$checked(true),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(
											_user$project$Main$ToggleGroupInt(el.id)),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text(el.desc),
							_1: {ctor: '[]'}
						}
					});
			},
			_user$project$Main$groupInt));
};
var _user$project$Main$ToggleInt = function (a) {
	return {ctor: 'ToggleInt', _0: a};
};
var _user$project$Main$checkbox = F3(
	function (name, v, bool) {
		return A2(
			_elm_lang$html$Html$label,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$checked(bool),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									_user$project$Main$ToggleInt(v)),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(name),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Main$viewChecked = F2(
	function (model, ele) {
		return A2(
			_elm_lang$html$Html$fieldset,
			{ctor: '[]'},
			A2(
				_elm_lang$core$List$map,
				function (el) {
					return A3(
						_user$project$Main$checkbox,
						_elm_lang$core$Basics$toString(el),
						_elm_lang$core$Basics$toString(el),
						!A2(_elm_lang$core$List$member, el, model.out));
				},
				ele));
	});
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h3,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_user$project$Main$x),
							A2(
								_elm_lang$core$Basics_ops['++'],
								' -> ',
								_elm_lang$core$Basics$toString(
									_user$project$Main$filtered(model))))),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_user$project$Main$viewChecked,
					model,
					_elm_lang$core$Dict$keys(
						_user$project$Main$freqN(_user$project$Main$x))),
				_1: {
					ctor: '::',
					_0: _user$project$Main$viewGroupInt(model),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(model)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$beginnerProgram(
	{model: _user$project$Main$initModel, view: _user$project$Main$view, update: _user$project$Main$update})();
